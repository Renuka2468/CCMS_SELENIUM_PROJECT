{"name": "test_existing_corporate[data0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5bf2c5e9dcb3 <unknown>\n#1 0x5bf2c5b8c4a7 <unknown>\n#2 0x5bf2c5bd731d <unknown>\n#3 0x5bf2c5bd73d1 <unknown>\n#4 0x5bf2c5c1a734 <unknown>\n#5 0x5bf2c5bf943d <unknown>\n#6 0x5bf2c5c17be9 <unknown>\n#7 0x5bf2c5bf91b3 <unknown>\n#8 0x5bf2c5bca24a <unknown>\n#9 0x5bf2c5bcac1e <unknown>\n#10 0x5bf2c5e61fdb <unknown>\n#11 0x5bf2c5e65f2b <unknown>\n#12 0x5bf2c5e4e0f1 <unknown>\n#13 0x5bf2c5e66a92 <unknown>\n#14 0x5bf2c5e32faf <unknown>\n#15 0x5bf2c5e8ce08 <unknown>\n#16 0x5bf2c5e8cfe0 <unknown>\n#17 0x5bf2c5e9ce04 <unknown>\n#18 0x7d7c43897b5a <unknown>", "trace": "self = <testcases.test_onboard_corporate.TestCorporateOnboard object at 0x7e488a5a55d0>\nonboard_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c2453cd1c74b0f31c6bb50db9f4da9cb\")>\ndata = {'address_1': 'S60YIWKYO8A2VpvTfTEjfgbnhvGRLUFDSZF', 'address_2': 'Tj1PwCnahqGah84IKinImtyCo0fh0', 'admin_name': 'denver', 'city': 'X8Rlr7Isc', ...}\n\n    @pytest.mark.parametrize(\"data\", test_data_positive)\n    def test_existing_corporate(self, onboard_setup, data):\n        driver = onboard_setup\n        onboardCorporate = OnboardCorporate(driver)\n        corporate_error = CorporateOnboardError(driver)\n        onboardCorporate.company_name_input(data[\"company_name\"])\n        onboardCorporate.company_desc_input(data[\"company_desc\"])\n        onboardCorporate.company_logo_upload(data[\"company_logo\"])\n        onboardCorporate.gst_number_input(data[\"gst_number\"])\n        onboardCorporate.pan_number_input(data[\"pan_number\"])\n        onboardCorporate.security_type_dropdown()\n        onboardCorporate.security_number_input(data[\"security_number\"])\n        onboardCorporate.security_amount_input(data[\"security_amount\"])\n        onboardCorporate.address_one(data[\"address_1\"])\n        onboardCorporate.address_two(data[\"address_2\"])\n        onboardCorporate.city_input(data[\"city\"])\n        onboardCorporate.state_input(data[\"state\"])\n        onboardCorporate.pincode_input(data[\"pincode\"])\n        onboardCorporate.admin_name_input(data[\"admin_name\"])\n        onboardCorporate.admin_mobile_input(config[\"Credentials\"][\"mobile_no_existing\"])\n        onboardCorporate.admin_email_input(data[\"email\"])\n        onboardCorporate.click_submit_button()\n>       popup_error = corporate_error.get_exist_mobile_corporate_error()\n\ntest_onboard_corporate.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../page_objects/error_page.py:95: in get_exist_mobile_corporate_error\n    error = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(self.existing_mobile_popoup)).text\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c2453cd1c74b0f31c6bb50db9f4da9cb\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7e488a4942c0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5bf2c5e9dcb3 <unknown>\nE       #1 0x5bf2c5b8c4a7 <unknown>\nE       #2 0x5bf2c5bd731d <unknown>\nE       #3 0x5bf2c5bd73d1 <unknown>\nE       #4 0x5bf2c5c1a734 <unknown>\nE       #5 0x5bf2c5bf943d <unknown>\nE       #6 0x5bf2c5c17be9 <unknown>\nE       #7 0x5bf2c5bf91b3 <unknown>\nE       #8 0x5bf2c5bca24a <unknown>\nE       #9 0x5bf2c5bcac1e <unknown>\nE       #10 0x5bf2c5e61fdb <unknown>\nE       #11 0x5bf2c5e65f2b <unknown>\nE       #12 0x5bf2c5e4e0f1 <unknown>\nE       #13 0x5bf2c5e66a92 <unknown>\nE       #14 0x5bf2c5e32faf <unknown>\nE       #15 0x5bf2c5e8ce08 <unknown>\nE       #16 0x5bf2c5e8cfe0 <unknown>\nE       #17 0x5bf2c5e9ce04 <unknown>\nE       #18 0x7d7c43897b5a <unknown>\n\n../.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "parameters": [{"name": "data", "value": "{'company_name': 'card91', 'company_desc': 'This is business for providing card backend compatibility', 'company_logo': '/home/renuka/Downloads/Notes.pdf', 'gst_number': '96JIUSZ5060R2ZV', 'pan_number': 'YBMJT6032R', 'security_number': '9874', 'security_amount': '10000000', 'address_1': 'S60YIWKYO8A2VpvTfTEjfgbnhvGRLUFDSZF', 'address_2': 'Tj1PwCnahqGah84IKinImtyCo0fh0', 'city': 'X8Rlr7Isc', 'state': 'wmPTxhTYKmUiZTdbXwh', 'pincode': '960835', 'admin_name': 'denver', 'mobile_no': '6623970794', 'email': 'yeqa85vv@lnpbkjzm.com'}"}], "start": 1715259316056, "stop": 1715259331054, "uuid": "ce7d2d88-d9f6-44f2-81b9-04bf7e1c8557", "historyId": "947d47cca8ce55109c7bbc6a4058ea81", "testCaseId": "d0037ccaad81071ed902778a847ad978", "fullName": "test_onboard_corporate.TestCorporateOnboard#test_existing_corporate", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('onboard_setup')"}, {"name": "suite", "value": "test_onboard_corporate"}, {"name": "subSuite", "value": "TestCorporateOnboard"}, {"name": "host", "value": "renuka-Latitude-7490"}, {"name": "thread", "value": "76640-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_onboard_corporate"}]}