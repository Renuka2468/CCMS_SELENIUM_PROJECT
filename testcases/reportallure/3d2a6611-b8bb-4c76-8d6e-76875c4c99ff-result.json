{"name": "test_existing_corporate[data0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x639398da5cb3 <unknown>\n#1 0x639398a944a7 <unknown>\n#2 0x639398adf31d <unknown>\n#3 0x639398adf3d1 <unknown>\n#4 0x639398b22734 <unknown>\n#5 0x639398b0143d <unknown>\n#6 0x639398b1fbe9 <unknown>\n#7 0x639398b011b3 <unknown>\n#8 0x639398ad224a <unknown>\n#9 0x639398ad2c1e <unknown>\n#10 0x639398d69fdb <unknown>\n#11 0x639398d6df2b <unknown>\n#12 0x639398d560f1 <unknown>\n#13 0x639398d6ea92 <unknown>\n#14 0x639398d3afaf <unknown>\n#15 0x639398d94e08 <unknown>\n#16 0x639398d94fe0 <unknown>\n#17 0x639398da4e04 <unknown>\n#18 0x7de504897b5a <unknown>", "trace": "self = <testcases.test_onboard_corporate.TestCorporateOnboard object at 0x7b2d5a1ab9d0>\nonboard_setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ad540b7653e16ecb200d2dbdb157b4c8\")>\ndata = {'address_1': 'z733t8vLBq1QgJ5YrbEOHmv5yYEta7KiyPHKmv', 'address_2': 'Tz8sUQtEQHRvY4DUO7MfpzIoIFFRzSnh', 'admin_name': 'denver', 'city': 'StvW4kOb', ...}\n\n    @pytest.mark.parametrize(\"data\", test_data_positive)\n    def test_existing_corporate(self, onboard_setup, data):\n        driver = onboard_setup\n        onboardCorporate = OnboardCorporate(driver)\n        corporate_error = CorporateOnboardError(driver)\n        onboardCorporate.company_name_input(data[\"company_name\"])\n        onboardCorporate.company_desc_input(data[\"company_desc\"])\n        onboardCorporate.company_logo_upload(data[\"company_logo\"])\n        onboardCorporate.gst_number_input(data[\"gst_number\"])\n        onboardCorporate.pan_number_input(data[\"pan_number\"])\n        onboardCorporate.security_type_dropdown()\n        onboardCorporate.security_number_input(data[\"security_number\"])\n        onboardCorporate.security_amount_input(data[\"security_amount\"])\n        onboardCorporate.address_one(data[\"address_1\"])\n        onboardCorporate.address_two(data[\"address_2\"])\n        onboardCorporate.city_input(data[\"city\"])\n        onboardCorporate.state_input(data[\"state\"])\n        onboardCorporate.pincode_input(data[\"pincode\"])\n        onboardCorporate.admin_name_input(data[\"admin_name\"])\n        onboardCorporate.admin_mobile_input(config[\"Credentials\"][\"mobile_no_existing\"])\n        onboardCorporate.admin_email_input(data[\"email\"])\n        onboardCorporate.click_submit_button()\n>       popup_error = corporate_error.get_exist_mobile_corporate_error()\n\ntest_onboard_corporate.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../page_objects/error_page.py:95: in get_exist_mobile_corporate_error\n    error = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(self.existing_mobile_popoup)).text\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ad540b7653e16ecb200d2dbdb157b4c8\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7b2d5a1d8540>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x639398da5cb3 <unknown>\nE       #1 0x639398a944a7 <unknown>\nE       #2 0x639398adf31d <unknown>\nE       #3 0x639398adf3d1 <unknown>\nE       #4 0x639398b22734 <unknown>\nE       #5 0x639398b0143d <unknown>\nE       #6 0x639398b1fbe9 <unknown>\nE       #7 0x639398b011b3 <unknown>\nE       #8 0x639398ad224a <unknown>\nE       #9 0x639398ad2c1e <unknown>\nE       #10 0x639398d69fdb <unknown>\nE       #11 0x639398d6df2b <unknown>\nE       #12 0x639398d560f1 <unknown>\nE       #13 0x639398d6ea92 <unknown>\nE       #14 0x639398d3afaf <unknown>\nE       #15 0x639398d94e08 <unknown>\nE       #16 0x639398d94fe0 <unknown>\nE       #17 0x639398da4e04 <unknown>\nE       #18 0x7de504897b5a <unknown>\n\n../.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "parameters": [{"name": "data", "value": "{'company_name': 'card91', 'company_desc': 'This is business for providing card backend compatibility', 'company_logo': '/home/renuka/Downloads/Notes.pdf', 'gst_number': '16YRKAN0358T0ZU', 'pan_number': 'TZBFH9388G', 'security_number': '9874', 'security_amount': '10000000', 'address_1': 'z733t8vLBq1QgJ5YrbEOHmv5yYEta7KiyPHKmv', 'address_2': 'Tz8sUQtEQHRvY4DUO7MfpzIoIFFRzSnh', 'city': 'StvW4kOb', 'state': 'YPpvBMymQlcWPb', 'pincode': '966030', 'admin_name': 'denver', 'mobile_no': '9332418524', 'email': 'tqjbkgou@wviawenj.com'}"}], "start": 1715259995732, "stop": 1715260010638, "uuid": "9fb797fc-d341-4ecb-bb40-38bd37a96774", "historyId": "7822d9b17cc519729cf2c80e3f6b51a7", "testCaseId": "d0037ccaad81071ed902778a847ad978", "fullName": "test_onboard_corporate.TestCorporateOnboard#test_existing_corporate", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('onboard_setup')"}, {"name": "suite", "value": "test_onboard_corporate"}, {"name": "subSuite", "value": "TestCorporateOnboard"}, {"name": "host", "value": "renuka-Latitude-7490"}, {"name": "thread", "value": "82387-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_onboard_corporate"}]}